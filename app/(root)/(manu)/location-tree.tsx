import { useLocalSearchParams } from "expo-router";
import MapView, { Marker } from "react-native-maps";
import { useEffect, useState, useRef } from "react";
import { View, Text, StyleSheet, ActivityIndicator } from "react-native";
import axios from "axios";

const defaultCenter = {
  latitude: 14.038907551768144, // Bangkok
  longitude: 100.72718945360457,
  latitudeDelta: 0.1,
  longitudeDelta: 0.1,
};

export default function LocationTree() {
  const params = useLocalSearchParams();
  const selectedLat = params.lat ? parseFloat(params.lat) : null;
  const selectedLon = params.lon ? parseFloat(params.lon) : null;

  const [treeLocations, setTreeLocations] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å API
  const [loading, setLoading] = useState(true);
  const mapRef = useRef(null); // ‚úÖ ‡πÉ‡∏ä‡πâ Ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° MapView

  useEffect(() => {
    console.log("üì° Fetching Tree Locations from API...");
    
    axios.get("http://172.20.10.2:8080/Tree888") // ‚úÖ ‡πÉ‡∏ä‡πâ API ‡∏à‡∏£‡∏¥‡∏á
      .then((response) => {
        console.log("üìä API Response:", response.data);

        if (response.data && Array.isArray(response.data.data)) {
          const trees = response.data.data.map((tree) => ({
            id: tree.id,
            latitude: parseFloat(tree.latitude),
            longitude: parseFloat(tree.longitude),
          }));
          setTreeLocations(trees);
        } else {
          console.error("‚ùå Invalid API response structure:", response.data);
        }
      })
      .catch((error) => {
        console.error("‚ùå Error fetching data:", error);
      })
      .finally(() => setLoading(false));
  }, []);

  useEffect(() => {
    if (selectedLat && selectedLon && mapRef.current) {
      console.log(`üìç ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å Notification: Lat ${selectedLat}, Lon ${selectedLon}`);
      
      // ‚úÖ ‡∏ã‡∏π‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏à‡∏≤‡∏Å Notification
      mapRef.current.animateToRegion({
        latitude: selectedLat,
        longitude: selectedLon,
        latitudeDelta: 0.01, // ‚úÖ ‡∏ã‡∏π‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        longitudeDelta: 0.01,
      }, 1000); // 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
  }, [selectedLat, selectedLon]);

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#4CAF50" />
        <Text style={styles.loadingText}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <MapView 
        ref={mapRef} // ‚úÖ ‡∏ú‡∏π‡∏Å Ref ‡∏Å‡∏±‡∏ö MapView
        style={styles.mapContainer} 
        initialRegion={selectedLat && selectedLon ? {
          latitude: selectedLat,
          longitude: selectedLon,
          latitudeDelta: 0.05,
          longitudeDelta: 0.05,
        } : defaultCenter}
      >
        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å API */}
        {treeLocations.map((tree) => (
          <Marker
            key={tree.id}
            coordinate={{ latitude: tree.latitude, longitude: tree.longitude }}
            title={`‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πâ ID: ${tree.id}`}
            description={`Lat: ${tree.latitude}, Lon: ${tree.longitude}`}
          />
        ))}

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏°‡∏≤‡∏à‡∏≤‡∏Å NotificationScreen */}
        {selectedLat !== null && selectedLon !== null && (
          <Marker
            coordinate={{ latitude: selectedLat, longitude: selectedLon }}
            title="‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô"
            description={`Lat: ${selectedLat}, Lon: ${selectedLon}`}
            pinColor="red" // üî¥ ‡πÄ‡∏ô‡πâ‡∏ô‡∏à‡∏∏‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          />
        )}
      </MapView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
    backgroundColor: "#E8F5E9",
    padding: 10,
  },
  header: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#2E7D32",
    marginBottom: 10,
  },
  mapContainer: {
    width: "100%",
    height: "90%",
  },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  loadingText: {
    fontSize: 16,
    color: "#666",
    marginTop: 10,
  },
});
